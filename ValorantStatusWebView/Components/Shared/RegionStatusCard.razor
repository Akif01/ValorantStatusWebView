@using System.Timers
@using ValorantStatusWebView.API
@using ValorantStatusWebView.DataTransferObjects
@using ValorantStatusWebView.Models
@inject ApiService Service

<div class="card" style="width: 18rem;">
    <div class="card-body">
        @if (HasError)
        {
            <h5 class="card-title">Loading failed!</h5>
            <p class="card-text text-danger">@_errorMessage</p>
        }
        else if (_currentModel is null)
        {
            <h5 class="card-title">Loading...</h5>
        }
        else
        {
            <h5 class="card-title">@_currentModel.RegionName</h5>
            <p class="card-text text-@(_currentModel.IsAvailable ? "success" : "danger")">
                @(_currentModel.IsAvailable ? "Available" : "Not Available")
            </p>
        }
    </div>
</div>

@code {
    public enum Regions
    {
        ap,
        br,
        eu,
        kr,
        latam,
        na,
    }

    [Parameter, EditorRequired]
    public required Regions Region { get; set; }

    public required PlatformModel _currentModel;
    private System.Timers.Timer? _timer;
    private string? _errorMessage;
    private bool HasError => !string.IsNullOrEmpty(_errorMessage);

    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Timers.Timer(30000); // 30 seconds
        _timer.Elapsed += async (sender, e) => await UpdateModelAsync();
        _timer.AutoReset = true;

        await UpdateModelAsync();
        _timer.Start();
    }

    private async Task UpdateModelAsync()
    {
        try
        {
            var newModel = await FetchModelAsync(Region);
            if (newModel is not null && !newModel.Equals(_currentModel))
            {
                _currentModel = newModel;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task<PlatformModel?> FetchModelAsync(Regions region)
    {
        try
        {
            _errorMessage = null;
            return await Service.GetPlatformModelAsync(region);
        }
        catch (HttpRequestException httpRequestException)
        {
            _errorMessage = httpRequestException.Message;
            return null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unexpected error: {ex.Message}";
            return null;
        }
    }
}
