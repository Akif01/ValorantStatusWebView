@using System.Timers
@using System.Threading
@using ValorantStatusWebView.API
@using ValorantStatusWebView.DataTransferObjects
@using ValorantStatusWebView.Models
@using Microsoft.AspNetCore.Components
@inject IApiService Service
@inject ILogger<RegionStatusCard> Logger
@implements IAsyncDisposable
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="card" style="width: 18rem;">
    <div id="region-status-card-body" class="card-body">
        @if (_state == ComponentState.Error)
        {
            <h5 class="card-title">Loading of region '@Region' failed!</h5>
            <p class="card-text text-danger">@_errorMessage</p>
        }
        else if (_state == ComponentState.Loading || _currentModel is null)
        {
            <h5 class="card-title">Loading region '@Region'...</h5>
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <h5 class="card-title">@_currentModel.RegionName</h5>
            <p class="card-text text-@(_currentModel.IsAvailable ? "success" : "danger")">
                @(_currentModel.IsAvailable ? "Available" : "Not Available")
            </p>
            <small class="text-muted">Last updated: @_lastUpdated.ToString("g")</small>
        }

        <button id="btn-refresh" class="btn btn-primary mt-3" @onclick="OnManualRefreshClickedAsync" disabled="@IsCooldownActive">
            @if (IsCooldownActive)
            {
                <span>Manual refresh available in @_remainingCooldown s</span>
            }
            else
            {
                <span>Refresh manually</span>
            }
        </button>
    </div>
</div>

@code {
    public enum Regions
    {
        ap,
        br,
        eu,
        kr,
        latam,
        na
    }

    private enum ComponentState
    {
        Loading,
        Loaded,
        Error
    }

    [Parameter, EditorRequired]
    public required Regions Region { get; set; }

    [Parameter]
    public int RefreshIntervalSeconds { get; set; } = 30;

    private PlatformModel? _currentModel;
    private System.Timers.Timer? _autoRefreshTimer;
    private System.Timers.Timer? _manualRefreshTimer;
    private string? _errorMessage;
    private DateTime _lastUpdated = DateTime.Now;
    private int _remainingCooldown;
    private ComponentState _state = ComponentState.Loading;
    private CancellationTokenSource _cts = new();

    private bool IsCooldownActive => _manualRefreshTimer?.Enabled ?? false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateModelAsync();

        _autoRefreshTimer = new System.Timers.Timer(TimeSpan.FromSeconds(RefreshIntervalSeconds).TotalMilliseconds);
        _autoRefreshTimer.Elapsed += OnAutoRefreshElapsed;
        _autoRefreshTimer.AutoReset = true;
        _autoRefreshTimer.Start();
    }

    private void OnAutoRefreshElapsed(object? sender, ElapsedEventArgs e)
    {
        if (_cts.IsCancellationRequested)
            return;

        _ = InvokeAsync(async () =>
        {
            await UpdateModelAsync();
            StateHasChanged();
        });
    }

    private async Task UpdateModelAsync()
    {
        _lastUpdated = DateTime.Now;

        try
        {
            _state = ComponentState.Loading;
            var newModel = await FetchModelAsync(Region, _cts.Token);

            if (newModel is not null && (_currentModel is null || !newModel.Equals(_currentModel)))
            {
                _currentModel = newModel;
            }

            _state = ComponentState.Loaded;
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _state = ComponentState.Error;
            Logger.LogError(ex, "Error fetching platform model for region {Region}", Region);
        }
    }

    private async Task<PlatformModel?> FetchModelAsync(Regions region, CancellationToken cancellationToken)
    {
        try
        {
            _errorMessage = null;
            return await Service.GetPlatformModelAsync(region, cancellationToken);
        }
        catch (HttpRequestException httpRequestException)
        {
            _errorMessage = httpRequestException.Message;
            throw;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unexpected error: {ex.Message}";
            throw;
        }
    }

    private async Task OnManualRefreshClickedAsync()
    {
        if (IsCooldownActive)
            return;

        StartManualRefreshCooldown();
        await UpdateModelAsync();
    }

    private void StartManualRefreshCooldown()
    {
        _remainingCooldown = RefreshIntervalSeconds;

        DisposeManualRefreshTimer();
        _manualRefreshTimer = new System.Timers.Timer(1000);
        _manualRefreshTimer.Elapsed += OnCooldownElapsed;
        _manualRefreshTimer.AutoReset = true;
        _manualRefreshTimer.Start();
    }

    private void OnCooldownElapsed(object? sender, ElapsedEventArgs e)
    {
        if (_cts.IsCancellationRequested)
            return;

        _ = InvokeAsync(() =>
        {
            _remainingCooldown--;

            if (_remainingCooldown <= 0)
            {
                DisposeManualRefreshTimer();
            }

            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        _cts.Cancel();

        DisposeAutoRefreshTimer();
        DisposeManualRefreshTimer();

        _cts.Dispose();

        await ValueTask.CompletedTask;
    }

    private void DisposeAutoRefreshTimer()
    {
        if (_autoRefreshTimer != null)
        {
            _autoRefreshTimer.Stop();
            _autoRefreshTimer.Elapsed -= OnAutoRefreshElapsed;
            _autoRefreshTimer.Dispose();
            _autoRefreshTimer = null;
        }
    }

    private void DisposeManualRefreshTimer()
    {
        if (_manualRefreshTimer != null)
        {
            _manualRefreshTimer.Stop();
            _manualRefreshTimer.Elapsed -= OnCooldownElapsed;
            _manualRefreshTimer.Dispose();
            _manualRefreshTimer = null;
        }
    }
}