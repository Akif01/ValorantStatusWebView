@using System.Timers
@using ValorantStatusWebView.API
@using ValorantStatusWebView.DataTransferObjects
@using ValorantStatusWebView.Models
@inject ApiService Service
@inject ConfigurationService ConfigService

<div class="card" style="width: 18rem;">
    <div class="card-body">
        @if (HasError)
        {
            <h5 class="card-title">Loading failed!</h5>
            <p class="card-text text-danger">@ErrorMessage</p>
        }
        else if (Model is null)
        {
            <h5 class="card-title">Loading...</h5>
        }
        else
        {
            <h5 class="card-title">@Model.RegionName</h5>
            <p class="card-text text-@(Model.IsAvailable ? "success" : "danger")">
                @(Model.IsAvailable ? "Available" : "Not Available")
            </p>
        }
    </div>
</div>

@code {
    public enum Regions
    {
        ap,
        br,
        eu,
        kr,
        latam,
        na,
    }

    [Parameter, EditorRequired]
    public required PlatformModel Model { get; set; }

    [Parameter, EditorRequired]
    public required Regions Region { get; set; }

    private System.Timers.Timer? _timer;
    private string? ErrorMessage { get; set; }
    private bool HasError => !string.IsNullOrEmpty(ErrorMessage);

    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Timers.Timer(30000); // 30 Sekunden
        _timer.Elapsed += async (sender, e) => await UpdateModelAsync();
        _timer.AutoReset = true;

        await UpdateModelAsync();
        _timer.Start();
    }

    private async Task UpdateModelAsync()
    {
        try
        {
            var newModel = await FetchModelAsync(Region);
            if (newModel is not null && !newModel.Equals(Model))
            {
                Model = newModel;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task<PlatformModel?> FetchModelAsync(Regions region)
    {
        try
        {
            ErrorMessage = null;
            var response = await Service.GetAsync<PlatformDataDto>(
                $"https://{region}.api.riotgames.com/val/status/v1/platform-data?api_key={ConfigService.ApiKey}");

            return response is not null ? new PlatformModel(response) : null;
        }
        catch (HttpRequestException httpRequestException)
        {
            ErrorMessage = httpRequestException.Message;
            return null;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unexpected error: {ex.Message}";
            return null;
        }
    }

    public void Dispose()
    {
        if (_timer is not null)
        {
            _timer.Stop();
            _timer.Elapsed -= async (sender, e) => await UpdateModelAsync();
            _timer.Dispose();
        }
    }
}
