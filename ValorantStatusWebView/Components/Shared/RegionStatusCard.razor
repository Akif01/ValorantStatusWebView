@using System.Timers
@using ValorantStatusWebView.API
@using ValorantStatusWebView.DataTransferObjects
@using ValorantStatusWebView.Models
@inject ApiService Service
@inject ConfigurationService ConfigService

<div class="card" style="width: 18rem;">
    <div class="card-body">
        @if (Model is null)
        {
            <h5 class="card-title">Loading...</h5>
        }
        else
        {
            <h5 class="card-title">@Model.RegionName</h5>
            <p class="card-text" style="color: @(Model.IsAvailable ? "green" : "red")">@(Model.IsAvailable ? "Available" : "Not Available")</p>
        }
    </div>
</div>

@code {
    public enum Regions
    {
        ap,
        br,
        eu,
        kr,
        latam,
        na,
    }

    [Parameter]
    public required PlatformModel Model { get; set; }

    [Parameter]
    public required Regions Region { get; set; }

    private System.Timers.Timer _timer = new System.Timers.Timer(30000); // 30 seconds;

    protected override async Task OnInitializedAsync()
    {
        Model = await FetchModel(Region);
        _timer.Elapsed += async (sender, e) => await UpdateModel();
        _timer.Start();
    }

    private async Task<PlatformModel> FetchModel(Regions region)
    {
        try
        {
            return new PlatformModel(
                await Service.GetAsync<PlatformDataDto>(
                    $"https://{region}.api.riotgames.com/val/status/v1/platform-data?api_key={ConfigService.ApiKey}"));
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    private async Task UpdateModel()
    {
        var newModel = await FetchModel(Region);
        if (Model is null || !Model.Equals(newModel))
        {
            Model = newModel;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
